
 
Table of Contents
Abstract	2
Introduction	2
Design Considerations	2
E-R Diagram	4
IMPLEMENTATION	6
TESTING	16
Views	16
Stored Procedures	22
Functions	28
Scripts	34
Transaction	40
Triggers	44
Business Reports	48
Table Definitions of all tables in the database (Appendix.)	52
Table Data :	63
Conclusion :	74
Remarks:	74



 


Abstract
In this project, I have designed, built, and populated a database for the Human Resources (HR) Department at Tesla, world’s leading car manufacturing company. This project will start with a request from the HR Manager. From there, I had to design a database using the foundational principals of data architecture learnt in class that is best suited to the department's needs. This project is important, as it is a scaled-down simulation of the kind of real-world assignments data architects work on every day.


Introduction
The project deals with various aspects the HR department has to tackle with on a daily basis, from hiring a new recruit, including their interview process, if it is an onsite or video interview, managing their travel and stay to the site, tracking an application status, onboarding activities, their reimbursement details upon filing an expense everything is bought under one roof with this project for Tesla. 

Design Considerations
We create a database with the name “Tesla”.

This is illustrated in the figure below.

 

Further we use DDL commands to build the complete database with over 20 tables and multiple entries in each of the table. I also populated the database by inserting over 10 meaningful data which helped me extract business insights for my project. The effectiveness of the database is further checked with CRUD Operations.

 
E-R Diagram 

 


I used VerTableau to create the following entity relationship diagram which acts a blueprint for me while I create these tables with their corresponding attributes in the database. 
The candidatedetails entity contains our applicants information with their name, address, emailID and most important aspect that a recruiter in the HR department would look for – Relevant Years of Work Experience, going ahead I will further explain each table, their relationships and their corresponding constraint.
Here is the list of relations that are used between the tables in my project. 
•	There is one-to-many relationship between CandidateDetails and DocumentMetaData – For example one candidate can have one or many reference letter in their application to Tesla.
•	There is one-to-many relationship between CandidateDetails and TravelDetails
•	There is one-to-many relationship between CandidateDetails and ReiumbersementRequested
•	There is one-to-many relationship between Candidates and AirlineReservation 
•	There is one-to-many relationship between Candidates and CarRental 
•	There is one-to-many relationship between HotelLocation and HotelReservation 
•	There is one-to-one relationship between Candidates and CandidateBlacklist 
•	There is many-to-many relationship between Interview and interviewer  - There is one-to-many relationship between CandidateDetails and DocumentMetaData – For example one candidate can have one or many reference letter in their application to Tesla.
•	There is one-to-many relationship between CandidateDetails and TravelDetails
•	There is one-to-many relationships between CandidateDetail and Application
•	There is one-to-many relationships between CandidateDetail and Complaint
•	There is one-to-many relationships between DocumentMetaData and Application
•	There is one-to-many relationships between Location and JobDetails
•	There is one-to-many relationships between JobDetails and JobOpeningDetails
•	There is one-to-many relationships between Onboarding and InterviewDetails
•	There is one-to-many relationships between HotelResevation and ReimbursementAlloted
•	There is one-to-many relationships between Application and InterviewDesicion
•	There is one-to-many relationships between TravelDetails and CarRental
•	There is one-to-many relationships between AirlineReservation amd ReimbursementAllotted
•	There is one-to-many relationships between Location and HR
•	There is one-to-many relationships between Department and HR
•	There is one-to-many relationships between Test and TestResult
•	There is one-to-many relationships between Application and Test
•	There is one-to-many relationships between TravelDetails and HotelResevation

 
IMPLEMENTATION

The source code for building our HR department’s database is given below : 

USE TESLA 
GO
CREATE TABLE Application (
ApplicationID int NOT NULL,
ApplicationCandidateID int NOT NULL, 
JobOpeningOpeningID int NOT NULL, 
DocumentMetaDataDocumentID int NOT NULL, 
Date date NOT NULL,
Status varchar(10) NOT NULL,
CONSTRAINT Application_pk PRIMARY KEY (ApplicationID) );//creating application table with applicationid as our primary key(constraint for primary key) and other attributes to determine applicant’s data.

-- Table: CandidateDetail
CREATE TABLE CandidateDetail (
CandidateID int NOT NULL,
FirstName varchar(30) NOT NULL,
MiddleName varchar(30) NOT NULL,
LastName varchar(30) NOT NULL,
PrimaryResidence varchar(100) NOT NULL,
DOB date NOT NULL,
RelevantExperience int NOT NULL,
EmailID varchar(30) NOT NULL,
CONSTRAINT CandidateDetail_pk PRIMARY KEY (CandidateID)
); //creating CandidateDetail table with candidateid as our primary key(constraint for primary key) and other attributes to determine a candidate’s detail.

-- Table: Complaint
CREATE TABLE Complaint (
ComplaintID int NOT NULL,
Application_ApplicationID int NOT NULL,
Description text NOT NULL,
CONSTRAINT Complaint_pk PRIMARY KEY (ComplaintID)
); //creating Complaint table with complaintid as our primary key(constraint for primary key) and other attributes to determine a candidate’s complaint detail.

-- Table: Department
CREATE TABLE Department (
DepartmentID int NOT NULL,
DepartmentName varchar(25) NOT NULL, DepartmentLocation varchar(25) NOT NULL,
CONSTRAINT Department_pk PRIMARY KEY (DepartmentID)
); //creating Department table with DepartmentID as our primary key(constraint for primary key) and other attributes to determine a department’s detail.

-- Table: DocumentData
CREATE TABLE DocumentMetaData (
DocumentID int NOT NULL,
CandidateDetailCandidateID int NOT NULL,
ResumeLink text NOT NULL,
ReferenceLetters text NOT NULL,
CoverLetter text NOT NULL,
CONSTRAINT DocumentMetaData_pk PRIMARY KEY (DocumentID)
); //creating DocumentData table with a candidate’s documents(resume, cover letter etc)to determine their metadata detail.

-- Table: HR
CREATE TABLE HR (
HRID int NOT NULL,
Location_LocationID int NOT NULL, Department_DepartmentID int NOT NULL,
 Name varchar(30) NOT NULL,
EmailID varchar(30) NOT NULL, CONSTRAINT HR_pk PRIMARY KEY (HRID)
); //creating HR table with HRID as our primary key(constraint for primary key) and other attributes to determine the HR’s detail.

-- Table: InterviewDecision
CREATE TABLE InterviewDecision (
DecisionID int NOT NULL,
Interviewer_InterviewerID int NOT NULL, Interview_InterviewID int NOT NULL,
Decision varchar(10) NOT NULL,
CONSTRAINT InterviewDe_pk PRIMARY KEY (DecisionID)
); //creating InterviewDecision table with DecisionID as our primary key(constraint for primary key) and other attributes to determine the Interviews Decision detail.


-- Table: InterviewDetails
CREATE TABLE InterviewDetails (
InterviewID int NOT NULL,
Application_ApplicationID int NOT NULL,
Date date NOT NULL,
Mode varchar(80) NOT NULL,
CONSTRAINT InterviewDetails_pk PRIMARY KEY (InterviewID)
); //creating InterviewDetails table with InterviewID as our primary key(constraint for primary key) and other attributes to determine the Interview detail.

-- Table: InterviewerDetails
CREATE TABLE InterviewerDetails (
InterviewerID int NOT NULL,
FullName varchar(50) NOT NULL,
EmailID varchar(30) NOT NULL,
Department_DepartmentID int NOT NULL,
Location_LocationID int NOT NULL,
CONSTRAINT InterviewerDetails_pk PRIMARY KEY (InterviewerID)
); //creating InterviewerDetails table with InterviewerID as our primary key(constraint for primary key) and other attributes to determine the Interviewer’s detail.
-- Table: JobDetail
CREATE TABLE JobDetail (
JobID int NOT NULL,
Department_DepartmentID int NOT NULL, Location_LocationID int NOT NULL,
Description varchar(1000) NOT NULL, Requirement varchar(4000) NOT NULL,
Vaccancy int NOT NULL,
CONSTRAINT JobDetail_pk PRIMARY KEY (JobID)
); //creating JobDetail table with JobID as our primary key(constraint for primary key) and other attributes to determine the Job detail.

-- Table: JobOpeningDetail
CREATE TABLE JobOpeningDetail (
OpeningID int NOT NULL, 
Jobs_JobID int NOT NULL,
Vaccancy int NOT NULL,
CONSTRAINT JobOpeningDetail_pk PRIMARY KEY (OpeningID) 
); //creating JobOpeningDetail table with OpeningID as our primary key(constraint for primary key) and other attributes to determine the Job opening details.

-- Table: Location
CREATE TABLE Location (
LocationID int NOT NULL,
City varchar(25) NOT NULL,
State varchar(3) NOT NULL,
County varchar(25) NOT NULL,
Country varchar(25) NOT NULL,
Zipcode int NOT NULL,
CONSTRAINT Location_pk PRIMARY KEY (LocationID)
); //creating Location table with LocationID as our primary key(constraint for primary key) and other attributes to determine the location’s detail of the interview where it will be held.

-- Table: Onboarding
CREATE TABLE Onboarding (
OnboardingID int NOT NULL,
Application_ApplicationID int NOT NULL, ReimbursementAllotted_AllotedID int NOT NULL,
StartDate date NOT NULL,
CONSTRAINT Onboarding_pk PRIMARY KEY (OnboardingID)
); //creating Onboarding table with OnboardingID as our primary key(constraint for primary key) and other attributes to determine the On boarding activities.

-- Table: ReimbursementAllotted
CREATE TABLE ReimbursementAllotted (
AllotedID int NOT NULL,
Application_ApplicationID int NOT NULL,
CompensationAmount int NOT NULL,
CONSTRAINT ReimbursementAllotted_pk PRIMARY KEY (AllotedID)
); //creating ReimbursementAllotted table with AllotedID as our primary key(constraint for primary key) and other attributes to determine the amount of reiumbersement allotted to each candidates.

-- Table: ReimbursementRequested
CREATE TABLE ReimbursementRequested (
RequestID int NOT NULL,
Application_ApplicationID int NOT NULL,
Amount int NOT NULL,
CONSTRAINT ReimbursementRequested_pk PRIMARY KEY (RequestID)
); //creating ReimbursementRequested table with RequestID as our primary key(constraint for primary key) and other attributes to determine the amount of money request for reiumbersement by each candidates.

-- Table: Test
CREATE TABLE Test (
TestID int NOT NULL,
ApplicationApplicationID int NOT NULL,
Date date NOT NULL,
Attempted varchar(30) NOT NULL,
Difficulty varchar(30) NOT NULL, CONSTRAINT Test_pk PRIMARY KEY (TestID)
); //creating Test table with TestID as our primary key(constraint for primary key) and other attributes to determine the applicant’s test details.

-- Table: TestResult
CREATE TABLE TestResult (
TestResultID int NOT NULL,
Test_TestID int NOT NULL,
ResultDeclared date NOT NULL,
Results varchar(10) NOT NULL,
CONSTRAINT TestResult_pk PRIMARY KEY (TestResultID)
); //creating TestResult table with TestResultID as our primary key(constraint for primary key) and other attributes to determine the test results of each candidate.

-- Table: TravelDetails
CREATE TABLE TravelDetails(
TravelID int NOT NULL,
InterviewDetails_InterviewID int FOREIGN KEY REFERENCES InterviewDetails 
(InterviewID), 
CandidateDetail_CandidateID int FOREIGN KEY REFERENCES CandidateDetail 
(CandidateID), 
CONSTRAINT TravelDetails_PK PRIMARY KEY (TravelID) 
); //creating TravelDetails table with TravelID as our primary key(constraint for primary key), Candidate and InterviewDetails as the foreign key and other attributes to determine the candidates travel details.

-- Table: AirplaneReservation
CREATE TABLE AirplaneReservation(
AirlineID int NOT NULL,
TicketNumber int NOT NULL,
AirlineCompany varchar(50) NOT NULL,
TravelDate date NOT NULL,
DepartureLocation varchar(30) NOT NULL,
Destination varchar(50) NOT NULL,
TicketPrice int NOT NULL,
TravelDetails_TravelID int FOREIGN KEY REFERENCES TravelDetails (TravelID),
CONSTRAINT AirplaneReservation_PK PRIMARY KEY (AirlineID)
); //creating AirplaneReservation table with AirlineID as our primary key(constraint for primary key) TravelID as the foreign key and other attributes to determine the candidates airline booking details.

-- Table: CarRental
CREATE TABLE CarRental(
CarRentalID int NOT NULL,
ReceiptNumber int NOT NULL,
RentalCompany varchar(30) NOT NULL,
TotalFare int NOT NULL,
TravelDetails_TravelID int FOREIGN KEY REFERENCES TravelDetails (TravelID),
CONSTRAINT CarRental_PK PRIMARY KEY (CarRentalID)
); //creating CarRental table with CarRentalID as our primary key(constraint for primary key) TravelID as the foreign key and other attributes to determine the candidates car rental booking details.

-- Table: HotelReservation
CREATE TABLE HotelReservation(
ReservationID int NOT NULL,
HotelReceipt varchar(50) NOT NULL,
HotelName varchar(30) NOT NULL,
CheckInDate DATE NOT NULL,
CheckOutDate DATE NOT NULL,
CostPerNight int NOT NULL,
NightsStayed int NOT NULL,
TravelDetails_TravelID int FOREIGN KEY REFERENCES TravelDetails (TravelID),
CONSTRAINT HotelReservation_PK PRIMARY KEY (ReservationID)
); //creating HotelReservation table with ReservationID as our primary key(constraint for primary key), TravelID as the foreign key and other attributes to determine the candidates hotel reservation booking details.


INSERT INTO Application VALUES 
(1200,201,601,601,'05/20/2021','Rejected'), 
(1201,201,602,602,'05/27/2021','Waiting'), 
(1202,202,604,603,'08/18/2021','Waiting'), 
(1203,204,603,604,'05/01/2021','Active'), 
(1204,204,605,604,'02/05/2021','Rejected'); //populating the table with application values

INSERT INTO Department VALUES--dept 
(1,'Software','Seattle'), (2,'Operations','Atlanta'), (3,'Marketing','Denver'), (4,'Audit','Irvine'), (5,'HumanResources','Detroit')
GO
INSERT INTO Location VALUES---loc
 (100,'Seattle','WA','Onondaga','USA',13210), (101,'Atlanta','GA','Fulton','USA',31032), (102,'Denver','CO','Adams','USA',33001), (103,'Irvine','CA','Tulare','USA',32324), (104,'Detroit','MI','Allegan','USA',411014);
INSERT INTO InterviewerDetails VALUES---interviewerdetails 
(400,'Aakash Verma','averma@tesla.com',1,100), (401,'Hemant Mahto','hmahto@tesla.com',2,100), (402,'Huzaif Kherani','hkherani@tesla.com',2,101), (403,'Ashitosh Gupta', 'agupta@tesla.com',3,102), (404,'Heena Shaikh','hshaikh@tesla.com',4,104); //populating the table with interviewers detail values
INSERT INTO HR VALUES -- HR 
(2400,100,1,'Sahil','spatel@tesla.hr.com'), (2401,102,2,'Asim','asimsh@tesla.hr.com'), (2402,103,3,'Vishal','vish@tesla.hr.com'), (2403,104,4,'Shruti','shrut@tesla.hr.com'), (2404,104,5,'Nehil','nehil@tesla.hr.com');
INSERT INTO JobDetail VALUES --JobDetail 
(500,1,101,'Software Engineer/IT Consultant','CS',100), (501,1,103,'Associate ', 'BCS',100),
(502,2,102,'Junior Consultant','Btech',100), (503,3,104,'Big Manager','MBA',100),
(504,5,100,'Con Manager','BBA',100);
INSERT INTO JobOpeningDetail VALUES---jobepening 
(600,500,100),
(601,504,100),
(602,502,100),
(603,500,100), 
(604,503,100);
INSERT INTO CandidateDetail VALUES ---candidatetable 
(201,'Saket','Suryakant','Sharma','India','04/9/1997',5,'sak1@hotmail.com'), 
(202,'Nirali','Dharmesh','Kabli','India','1/14/1992',4,'nkabli6@gmail.com'), 
(203,'Malav','Astha','Tanishq','United Kingdom','10/1/1992',4,'mala2@hotmail.com'), 
(204,'Naman','Camila','Sharma','Pakistan','7/18/2000',8, 'momo12@live.com'), 
(205,'Sam','Nirali','Kabli','Seattle','05/12/1991',8,'sam12@gmail.com');
INSERT INTO CandidateDetail VALUES ---candidatetable 
(206,'Jaykant','Shirke','Sharma','India','05/9/1997',2,'sak1@hotmail.com'), 
(207,'Arpitha','Raghavan','Kaushik','India','11/4/1992',3,'nkabli6@gmail.com'), 
(208,'Jas','Nipun','Mann','Seattle','1/10/1992',4,'mala2@hotmail.com'), 
(209,'Raj','Prakash','Galsingh','United Kingdom','7/8/2000',3, 'momo12@live.com'), 
(210,'Joey','Samuel','Bing','Pakistan','10/22/1991',9,'sam12@gmail.com'); //populating the table with candidate details values
INSERT INTO DocumentMetaData VALUES---documentsmetadata 
(600,205,'https://drive.com/pp/resume.pdf','https://drive.com/pp/ref.pdf','https://drive.com/pp/r letter.pdf'), 
(601,201,'https://drive.com/mj/msume.pdf','https://drive.com/mj/fdoc.pdf','https://drive.com/mj /mj_cl.pdf'), 
(602,202,'https://drive.com/em/res.pdf','https://drive.com/em/EMref.pdf','https://drive.com/em/ EMcoverletter.pdf'),
(603,203,'https://drive.com/sp/vimra.pdf','https://drive.com/sp/vim.pdf','https://drive.com/ef/vi mcover.pdf'), 
(604,204,'https://drive.com/ef/ehg_resume.pdf','https://drive.com/ef/ef_ref.pdf','https://drive.c om/sp/rletter.pdf');
INSERT INTO Complaint VALUES -- complaint 
(1100,1201,'Audio Quality was not code'), (1101,1202,'The interview was not as per desc'), (1102,1201,'The interviewer was very rude'), (1103,1202,'bad'),
(1104,1201,'interviewer was very casual');
INSERT INTO Test VALUES -- test 
(1400,1200,'05/02/2022','Yes','easy'), (1401,1201,'05/02/2022','Yes','med'), (1402,1202,'05/02/2022','Yes','diff'), (1403,1203,'05/02/2022','Yes','easy'), (1404,1204,'01/15/2022','Yes','diff');
INSERT INTO TestResult VALUES--test result 
(1700,1401,'12/8/2021','Yes'), (1701,1405,'11/8/2021','Yes'), (1702,1402,'10/8/2021','Yes'), (1703,1403,'9/8/2021','Yes'), (1704,1404,'2/8/2021','Yes');
INSERT INTO InterviewDetails VALUES--InterviewDetails 
(1100,1201,'05/13/2022','verbal'), 
(1101,1201,'05/10/2022','phonecall'), 
(1102,1202,'05/17/2022','online'), 
(1103,1203,'05/18/2022','in-person'), 
(1104,1204,'02/01/2022','Online');
INSERT INTO InterviewDecision VALUES --InterviewDecision 
(1900,400,1100,1),
(1901,402,1100,0),
(1902,400,1102,1),
(1903,403,1100,1), (1904,402,1101,1), (1205,400,1101,1),

(1206,401,1103,1), (1207,404,1104,0);

INSERT INTO TravelDetails VALUES --TravelDetails
(2000,1100,201),
(2001,1101,202),
(2002,1102,203),
(2003,1103,204),
(2004,1104,205);

INSERT INTO CarRental VALUES --CarRental
(1111,100,'Avis',170,2000),
(1112,101,'Budget',165,2001),
(1113,102,'Hertz Car Rental',155,2002),
(1114,103,'Zipcar',200,2003),
(1115,104,'Enterprise',185,2004);

INSERT INTO AirplaneReservation VALUES --AirplaneReservation
(0701,3459100,'Delta Airline','12/12/2022','Denver','Houston',350,2000),
(0702,3460101,'Air Emirates','12/03/3033','Austin','Houston',459,2001),
(0703,3461102,'Qatar Airways','12/09/2022','Syracuse','Houston',550,2002),
(0704,3462103,'JetBlue','12/20/2022','Irvine','Houston',670,2003),
(0705,3463104,'Etihad','12/24/2022','Chicago','Houston',450,2004); //populating the table with airline reservation values

INSERT INTO HotelReservation VALUES --HotelReservation
(5100,'UG34HJT1','Marriot','12/23/2022','12/28/2022',350,5,2000),
(5101,'SN678HWT','Sheraton','12/24/3033','12/29/2022',459,5,2001),
(5102,'34RTHY2D','Hyatt','12/15/2022','12/20/2022',550,5,2002),
(5103,'WRT56THY','Hilton','12/17/2022','12/23/2022',670,6,2003),
(5104,'SF234HUN','Radisson','12/20/2022','12/26/2022',450,6,2004);

INSERT INTO ReimbursementAllotted VALUES -- ReimbursementAllotted 
(1400,1200,21000),
(1401,1201,14000),
(1402,1202,12000),
(1403,1203,45000), (1404,1202,45000);
INSERT INTO ReimbursementAllotted VALUES -- ReimbursementAllotted 
(1405,1205,21000),
(1406,1206,11000),
(1407,1207,10000),
(1408,1208,45000), (1409,1209,5000); //populating the table with reimbursement values
INSERT INTO ReimbursementRequested VALUES (1500,800,1200),
(1501,801,850),
(1502,802,700),
(1503,803,1500), (1504,804,2000);
INSERT INTO Onboarding VALUES (1600,800,1400,'06/01/2022'), (1601,801,1401,'06/01/2022'), (1602,802,1402,'06/01/2022'), (1603,803,1403,'06/01/2022'), (1604,804,1404,'06/01/2022');
-- foreign keys
-- Reference: Application_Candidate (table: Application)
ALTER TABLE Application ADD CONSTRAINT Application_Candidate_FK
FOREIGN KEY (ApplicationCandidateID) REFERENCES CandidateDetail (CandidateID)
;//foreign key constraints
-- Reference: Application_Documents (table: Application)
ALTER TABLE Application ADD CONSTRAINT Application_Documents
FOREIGN KEY (DocumentMetaDataDocumentID) REFERENCES DocumentMetaData (DocumentID)
;
-- Reference: Application_JobOpening (table: Application)
ALTER TABLE Application ADD CONSTRAINT Application_JobOpening
FOREIGN KEY (JobOpeningOpeningID) REFERENCES JobOpeningDetail (OpeningID)
;
-- Reference: Complain_Application (table: Complaint)
ALTER TABLE Complaint ADD CONSTRAINT Complain_Application
FOREIGN KEY (Application_ApplicationID) REFERENCES Application (ApplicationID)
 ;
-- Reference: Documents_Candidate (table: DocumentMetaData)
ALTER TABLE DocumentMetaData ADD CONSTRAINT Documents_Candidate
FOREIGN KEY (CandidateDetailCandidateID) REFERENCES CandidateDetail (CandidateID)
;
-- Reference: HR_Department (table: HR)
ALTER TABLE HR ADD CONSTRAINT HR_Department
FOREIGN KEY (Department_DepartmentID) REFERENCES Department (DepartmentID)
;
-- Reference: HR_Location (table: HR)
ALTER TABLE HR ADD CONSTRAINT HR_Location
FOREIGN KEY (Location_LocationID) REFERENCES Location (LocationID)
;
-- Reference: Interview_Application (table: InterviewDetails)
ALTER TABLE InterviewDetails ADD CONSTRAINT Interview_Application
FOREIGN KEY (Application_ApplicationID) REFERENCES Application (ApplicationID)
;
-- Reference: Interviewer_Department (table: InterviewerDetails)
ALTER TABLE InterviewerDetails ADD CONSTRAINT Interviewer_Department
FOREIGN KEY (Department_DepartmentID) REFERENCES Department (DepartmentID)
;
-- Reference: Interviewer_Location (table: InterviewerDetails)
ALTER TABLE InterviewerDetails ADD CONSTRAINT Interviewer_Location
FOREIGN KEY (Location_LocationID) REFERENCES Location (LocationID)
;
-- Reference: InterviewersDescision_Interview (table: InterviewDe)
ALTER TABLE InterviewDe ADD CONSTRAINT InterviewersDescision_Interview
FOREIGN KEY (Interview_InterviewID) REFERENCES InterviewDetails (InterviewID) ;
-- Reference: InterviewersDescision_Interviewer (table: InterviewDe)
ALTER TABLE InterviewDe ADD CONSTRAINT InterviewersDescision_Interviewer
FOREIGN KEY (Interviewer_InterviewerID) REFERENCES InterviewerDetails (InterviewerID)
-- Reference: JobOpening_Jobs (table: JobOpeningDetail)
ALTER TABLE JobOpeningDetail ADD CONSTRAINT JobOpening_Jobs
FOREIGN KEY (Jobs_JobID) REFERENCES JobDetail (JobID)
;
-- Reference: Jobs_Department (table: JobDetail)
ALTER TABLE JobDetail ADD CONSTRAINT Jobs_Department
FOREIGN KEY (Department_DepartmentID) REFERENCES Department (DepartmentID)
;
-- Reference: Jobs_Location (table: JobDetail)
ALTER TABLE JobDetail ADD CONSTRAINT Jobs_Location
FOREIGN KEY (Location_LocationID) REFERENCES Location (LocationID)
;
-- Reference: Onboarding_Application (table: Onboarding)
ALTER TABLE Onboarding ADD CONSTRAINT Onboarding_Application
FOREIGN KEY (Application_ApplicationID) REFERENCES Application (ApplicationID)
;
-- Reference: Onboarding_ReimbursementAllotted (table: Onboarding)
ALTER TABLE Onboarding ADD CONSTRAINT Onboarding_ReimbursementAllotted
FOREIGN KEY (ReimbursementAllotted_AllotedID) REFERENCES ReimbursementAllotted (AllotedID)
;
-- Reference: ReimbursementAllotted_Application (table: ReimbursementAllotted)
ALTER TABLE ReimbursementAllotted ADD CONSTRAINT ReimbursementAllotted_Application

FOREIGN KEY (Application_ApplicationID) REFERENCES Application (ApplicationID)
;
-- Reference: ReimbursementRequested_Application (table: ReimbursementRequested) 
ALTER TABLE ReimbursementRequested ADD CONSTRAINT ReimbursementRequested_Application
FOREIGN KEY (Application_ApplicationID) REFERENCES Application (ApplicationID)
;
-- Reference: TestResult_Test (table: TestResult)
ALTER TABLE TestResult ADD CONSTRAINT TestResult_Test
FOREIGN KEY (Test_TestID) REFERENCES Test (TestID)
;
-- Reference: Test_Application (table: Test)
ALTER TABLE Test ADD CONSTRAINT Test_Application
FOREIGN KEY (ApplicationApplicationID) REFERENCES Application (ApplicationID)
;
-- Reference: TravelDetails_Interviewer (table: TravelDetails)
ALTER TABLE TravelDetails ADD CONSTRAINT TravelDetails_Interviewer
FOREIGN KEY (Interviewer_InterviewerID) REFERENCES InterviewerDetails (InterviewerID)
;


 
TESTING

Views

1. 
Create View candidateStatusWithAmount11 AS
SELECT 
cd.FirstName + ' ' + cd.MiddleName + ' ' + cd.LastName  as "Candidate Name", 
cd.EmailID, 
Status, 
CompensationAmount
from CandidateDetail cd join Application a on cd.CandidateID = a.ApplicationCandidateID 
join ReimbursementAllotted ra on a.ApplicationID = ra.Application_ApplicationID
where CompensationAmount > 40000

SELECT * from candidateStatusWithAmount11 

 

 

This view illustrates all offers whose compensation is above $40,000.

 
2.  
Create View jobStatus AS
select Status, count(*) as num_of_candidates from candidateStatusWithAmount group by Status

SELECT * from jobStatus 
 
 

In this view, we determine candidates reimbursement status for Active, Rejected and Waiting.

3.	
CREATE VIEW jobsDistribution as
select state, Country, count(*) as num_of_jobs from JobDetail jd JOIN Location l on jd.Location_LocationID = l.LocationID group by [State],Country

SELECT * from jobsDistribution 
 
 
This view shows the details of jobopenings in terms of vacancy in each state of USA.

4.	
Create VIEW jobsPerDepartment as 
select DepartmentName, count(*) as num_of_jobs from JobDetail jd join Department d on jd.Department_DepartmentID = d.DepartmentID GROUP by DepartmentName

select * from jobsPerDepartment
 
 

This view shows the details of jobopenings in terms of vacancy in each department at Tesla.

 
Stored Procedures

1.	

CREATE PROCEDURE CandidateProc @PrimaryResidence varchar(100)
AS
SELECT C.CandidateID,C.FirstName,C.MiddleName, C.LastName,C.EmailID,C.PrimaryResidence,C.RelevantExperience
FROM CandidateDetail AS C
WHERE C.PrimaryResidence = @PrimaryResidence;

EXEC CandidateProc @PrimaryResidence = 'India' ;
 
 

In this stored procedure, we determine for candidate’s primary residence in India.

 
2.	

CREATE PROCEDURE ModeofInterview @Mode varchar(10)
AS
SELECT Cand.FirstName, Cand.LastName, Cand.EmailID,JD.Description AS JobsApplied, App.Status,I.Date,I.Mode
FROM InterviewDetails AS I
JOIN Application AS App ON I.Application_ApplicationID=App.ApplicationID
JOIN CandidateDetail AS Cand ON Cand.CandidateID=App.ApplicationCandidateID
JOIN JobOpeningDetail AS J ON J.OpeningID=App.JobOpeningOpeningID
JOIN JobDetail AS JD ON JD.JobID=J.Jobs_JobID
WHERE I.Mode = @Mode;

EXEC ModeofInterview @Mode = 'verbal' ; 
EXEC ModeofInterview @Mode = 'online' ;



 
 


In this stored procedure, we use join on an applicant’s detail for their position  and details to find out which of the candidate is waiting on their interview results with their date and mode of interview. 

3. 

CREATE PROCEDURE CandidateResults @Res varchar(10)
AS
SELECT Cand.FirstName,Cand.LastName,Cand.RelevantExperience,Cand.EmailID,TestR.Results FROM Test AS test
JOIN TestResult AS TestR ON test.TestID = TestR.Test_TestID
JOIN Application AS App ON test.ApplicationApplicationID=App.ApplicationID
JOIN CandidateDetail AS Cand ON Cand.CandidateID=App.ApplicationCandidateID WHERE TestR.Results = @Res;

EXEC CandidateResults @Res = 'Yes';




 
 
 
In this procedure we filter the candidate’s who successfully landed a job at tesla and got a yes from the HR department.




4.
CREATE PROCEDURE MyEmployeeJobDetails
AS
SELECT JobD.Description,Loc.City,Loc.State,Loc.Country,Dept.DepartmentName,JobD.Vaccancy,JobD.Requirement
FROM JobDetail JobD
JOIN Department Dept ON Dept.DepartmentID=JobD.Department_DepartmentID JOIN Location AS Loc ON JobD.Location_LocationID=Loc.LocationID;

EXEC MyEmployeeJobDetails;

 
 
This store procedure helps the HR department determine job vacancy in their organization which is further broken down into vacancy in each department.

Functions

1. 	

CREATE FUNCTION CompensationGreaterThan(@num int) RETURNS TABLE AS
RETURN (SELECT CompensationAmount FROM ReimbursementAllotted
where CompensationAmount > @num);

select * from CompensationGreaterThan(900); 
select * from CompensationGreaterThan(50000);






 
 


 

In this function, we select the details of the candidate who has been offered the highest compensation. This function helps enable the HR department to check range for compensation amount, here we have two ranges defined in terms of amount greater than 900$

 
2. 	

CREATE FUNCTION VaccancyGreaterThan(@num int) RETURNS TABLE AS
RETURN (SELECT Vaccancy
FROM JobOpeningDetail
where Vaccancy > @num);

CREATE FUNCTION VaccancyLesserThan(@num int) RETURNS TABLE AS
RETURN (SELECT Vaccancy
FROM JobOpeningDetail
where Vaccancy < @num);

select * from VaccancyGreaterThan(50); 
select * from VaccancyLesserThan(50);






 
 
 
This function helps determine a range of vacanies for each department, here we have populated the ranges for vacancy greater and lesser than 50

3. 

CREATE FUNCTION Youngest() RETURNS INT
BEGIN
RETURN (SELECT MAX(CandidateID) FROM CandidateDetail
WHERE DOB =(SELECT MAX(DOB) FROM CandidateDetail));
END

SELECT *
FROM CandidateDetail
WHERE CandidateID=dbo.Youngest();

 
 
This function helps the HR department determine the youngest candidate based on their date of birth. 
4. 

CREATE FUNCTION Oldest() RETURNS INT
BEGIN
RETURN (SELECT MIN(CandidateID) FROM CandidateDetail
WHERE DOB =(SELECT MIN(DOB) FROM CandidateDetail));
END

SELECT *
FROM CandidateDetail
WHERE CandidateID=dbo.Oldest();

 
 
This function helps the HR department determine the eldest candidate based on their date of birth. This helps the HR get an idea about their work experience too
Scripts

1. 

USE TESLA;
GO
CREATE ROLE CandidateEntry;
GRANT UPDATE
ON CandidateDetail
TO CandidateEntry;
GO
CREATE ROLE AddLatestJob
GRANT INSERT, UPDATE
ON JobOpeningDetail
TO AddLatestJob
GO
CREATE LOGIN Saket WITH PASSWORD = 'nkataman@123$', DEFAULT_DATABASE = tesla;
CREATE USER SakSharma FOR LOGIN Saket;
ALTER ROLE CandidateEntry ADD MEMBER SakSharma;


 
 

In this script, we create a user login with username and password for a new member/candidate – Saket.

 
2.	

USE TESLA
CREATE ROLE InterviewDecision;
GRANT UPDATE
ON
Interview TO InterviewDecision;
GRANT INSERT,
UPDATE ON InterviewFinalists TO InterviewDecision;

SELECT * from InterviewDecision

 

 

 

In Projects database, we create a role called “InterviewDecision”, and then we grant an update on Interview to InterviewDecision. Grant Insert and update on InterviewFinalists and to InterviewDecision.

3. 
USE TESLA;
GO
CREATE ROLE CandidateEntry;
GRANT UPDATE
ON CandidateDetail
TO CandidateEntry;
GO
CREATE ROLE AddLatestJob
GRANT INSERT, UPDATE
ON JobOpeningDetail
TO AddLatestJob
GO
CREATE LOGIN Nirali WITH PASSWORD = 'nirali@6129', DEFAULT_DATABASE = tesla;
CREATE USER nkabli FOR LOGIN Nirali;
ALTER ROLE CandidateEntry ADD MEMBER nkabli;

 
We use Tesla database and we create a login Nirali with the password = nirali@6129. We then set the default database as Tesla, and create a user named “nkabli” for the login. After which, we alter the role InterviewDecision and add the member Nirali into it.

4. 
USE TESLA;
GO
CREATE ROLE CandidateEntry;
GRANT UPDATE
ON CandidateDetail
TO CandidateEntry;
GO
CREATE ROLE AddLatestJob
GRANT INSERT, UPDATE
ON JobOpeningDetail
TO AddLatestJob
GO
CREATE LOGIN Naman WITH PASSWORD = 'nsharma@99', DEFAULT_DATABASE = tesla;
CREATE USER momo FOR LOGIN Naman;
ALTER ROLE CandidateEntry ADD MEMBER momo;

 
We use Tesla database and we create a login Naman with the password = nsharma@99. We then set the default database as Tesla, and create a user named “momo” for the login. After which, we alter the role InterviewDecision and add the member Naman into it.
 

Transaction
1.
BEGIN TRANSACTION;
INSERT INTO CandidateDetail VALUES
(122,'Monica','Chandler','Bing','United States','2/10/1993',2,'mbing@gmail.com');
COMMIT;
 
 


In this transaction, if a Status of a candidate in the Offers table changes to accepted, we move them into the Employees table, while adding crucial details about regarding this candidate into the new table.
2.
select * from DocumentMetaData
Begin transaction;
insert into DocumentMetaData values (601,201,'abcd.ed','raoe.jpf','drive.opeg');
Commit;
select * from DocumentMetaData

 
 
In this transaction,  we insert the document meta data for a new candidate in the database for Tesla.
3. 
SELECT * FROM CandidateDetail;
BEGIN TRANSACTION;
DELETE FROM CandidateDetail WHERE CandidateID=210;
SELECT * FROM CandidateDetail;
ROLLBACK;
SELECT * FROM CandidateDetail;
 
 
In this transaction, we use it to delete a given candidate’s detail entries.
4.
Begin Transaction
update Application set Status='Waiting'
select * from Application
Rollback;
select * from Application
 
 
This transaction will help the HR department to determine candidate’s who are still waiting a result on their application status.
Triggers 

1.

CREATE TRIGGER AfterOnboardingInformation1 
ON Onboarding 
AFTER UPDATE
AS
BEGIN 
UPDATE JobOpeningInformation 
SET availability = availability-1 
END
DROP TRIGGER IF EXISTS AfterOnboardingInformation; 
 
This trigger is created so whenever a new entry is made into the database the following trigger makes sure the details entered are correctly modified, updated or deleted form the database.

 2.

create trigger DeleteMyOldReco
ON DocumentMetaData AFTER INSERT
AS BEGIN DELETE FROM DocumentMetaData WHERE DocumentMetaData.CandidateDetailCandidateID =
(SELECT CandidateDetailCandidateID FROM inserted) AND DocumentMetaData.DocumentID <>
(SELECT DocumentID FROM inserted) END;INSERT INTO Documents VALUES (605,205,'upresume','upreferenceletter','upcoverletters');


 
This trigger is turned on whenever a new metadata for candidate’s application is updated in database, it ensures the correctness of the same.

3. 
CREATE TRIGGER letuschangestatusdates
ON Complaint AFTER INSERT
AS BEGIN
UPDATE Application SET Status = 'Awaiting' , Date = '05/07/2021'
WHERE Application.ApplicationID = (SELECT Application_ApplicationID FROM inserted) END;
 
INSERT INTO Complaint VALUES (1103,1202,'No Light');

 
The following trigger helps the HR to change the application status date and status oin the candidate database


4. 

CREATE TRIGGER letuseditname
ON CandidateDetail AFTER INSERT
AS BEGIN
UPDATE CandidateDetail SET FirstName = UPPER(LEFT(FirstName,1)) +
LOWER(SUBSTRING(FirstName,2,LEN(FirstName)))
WHERE CandidateDetail.CandidateID IN (Select CandidateID FROM inserted) END;
 
Select * from CandidateDetail


 
The following trigger inserts candidate details and will help the HR to set the length of characters that a candidate can update in their application.
Business Reports 
1.	 

select cd.FirstName + ' ' + cd.MiddleName + ' ' + cd.LastName as "Candidate Name",
 RentalCompany,
 TotalFare,
 AirlineCompany,
 TicketPrice,
 HotelName,
 (NightsStayed * CostPerNight ) as HotelCost,
 ( TotalFare + TicketPrice + (NightsStayed * CostPerNight )) as TotalExpense
 from CandidateDetail cd JOIN TravelDetails td on cd.CandidateID=td.CandidateDetail_CandidateID
 JOIN CarRental cr on td.TravelID = cr.TravelDetails_TravelID
 JOIN AirplaneReservation ar on td.TravelID=ar.TravelDetails_TravelID
 JOIN HotelReservation hr on td.TravelID=hr.TravelDetails_TravelID

 
This business report will help the HR analyse the total cost estimates in flights, airline and hotel reservation the HR has to approve for each candidate.
2.	

select 
 Requirement,
 sum(Vaccancy) as TotalJobs, 
 DepartmentName,
 DepartmentLocation,
 Name
 from JobDetail jd join Department d on jd.Department_DepartmentID = d.DepartmentID
 JOIN HR h on d.DepartmentID=h.Department_DepartmentID
 JOIN InterviewerDetails id on d.DepartmentID=id.Department_DepartmentID
 JOIN InterviewDecision inde on id.InterviewerID=inde.Interviewer_InterviewerID
 GROUP by Requirement, DepartmentName, DepartmentLocation, Name


 
This business report will help the HR analyse the total number of vacancies in each department and who is the corresponding interview head for those departments.
3.	

select 
 PrimaryResidence as Location,
 count(*) as cnt_applications,
 [Status],
 Attempted,
 Difficulty,
 Results
  from CandidateDetail cd JOIN Application a ON  cd.CandidateID=a.ApplicationCandidateID
 JOIN test t on a.ApplicationID=t.ApplicationApplicationID
 JOIN TestResult tr on t.TestID=tr.Test_TestID
 GROUP by PrimaryResidence, [Status], Attempted,Difficulty,Results

 
This business report will help the HR analyse the candidates who attempted the test and understand how they felt about the difficulty level for the exam.
4.	


SELECT COUNT(CandidateID) as 'No.of Candidates',
AVG(RelevantExperience) as 'Average number of relevant work experiene'
FROM CandidateDetail
WHERE PrimaryResidence = 'INDIA'


 
This Business Report will help analyse the HR to determine the average number of work experience of candidates from India, they can change and alter the country as required.
Table Definitions of all tables in the database (Appendix.)
  
 
 

 


 


 



 

 

 

 

 
 
 
 

 

 
 
 

 
 
Table Data : 
1.	 AirplaneReservation
 

2.	Application
  

3.	 CandidateDetail

 


4.	 CarRental
 

5.	Complaint
 

6.  Department

 


7. DocumentMetaData
 

8. HotelReservation

 

9. HR
 

10. InterviewDecision
 



11. InterviewDetails
 

12. InterviewerDetails

 
13. JobDetails
 

14. JobOpenningDetails
 


15. Location
 

16.OnBoarding
 


17. ReiumbersementAllotted
 

18. ReiumbersementRequested
 


19. Test
 

20. TestResult
 


21. TravelDetails
 

Conclusion : 
This project is built to enhance the efficiency in the HR department at Tesla and help manage their database management system for all existing and newly hired employees. According to the requested requirement the HR can add, manipulate, update and delete all employee data in his organization. The HR can also add new departments and delete them. This database management system also helps the HR in easily flowing through the tasks for a new interview, managing each application and dealing with aspects like onboarding activities, document management, reimbursement amounts etc. The required records can be easily viewed by the HR anytime time he wants in an instant. There are various primary, foreign key and business constraints added to further enhance the efficiency of the database. With the triggers, function, script, procedures and views we learnt in class, I further use them to the robustness of our database for Tesla.
Remarks: 
The main objective of this HR database management system for Tesla is to save time, make the system cost effective and manage records efficiently.
